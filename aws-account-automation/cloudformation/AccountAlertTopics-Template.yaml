AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy SNS Notification Topics and Alarms for Generic Account Notification

Parameters:
  pAccountDescription:
    Description: Identify this account in the notices sent
    Type: String
    AllowedPattern: "[A-Za-z0-9]+"

  pInitialSubscriberEmail:
    Description: Add this initial email to the alerts
    Type: String
    Default: NONE

  pBillingThreshold:
    Description: Sets the billing alert to go off above this figure
    Type: Number
    Default: 0

  pDeploySlackLambda:
    Description: Whether or not to deploy the slack lambda
    Type: String
    Default: "no"
    AllowedValues:
    - "yes"
    - "no"

  pSlackWebhookSecret:
    Description: Name of the Secrets Manager secret where the WebHook is stored
    Type: String

  pSlackChannel:
    Description: Slack Channel to send the spam to
    Type: String
    Default: '#aws_notices'

  pIconEmoji:
    Description: Slack Emoji to use
    Type: String
    Default: ':cloud:'

  pAlarmEmoji:
    Description: Slack Emoji to use for CloudWatch Alarm in Alarm State
    Type: String
    Default: ':alert:'

  pOkEmoji:
    Description: Slack Emoji to use for CloudWatch Alarm in OK State
    Type: String
    Default: ':green_check:'

Conditions:
  cDeploySlackLambda: !Equals [ !Ref pDeploySlackLambda, "yes"]
  cBillingAlarm: !Not [!Equals [ !Ref pBillingThreshold, 0]]
  cEMailSubscription: !Not [!Equals [ !Ref pInitialSubscriberEmail, "NONE"]]

Resources:

  SNSAlertsCritical:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ['', ["Critical Alerts for ", !Ref 'pAccountDescription']]
      TopicName: !Join ['-', ["Critical-Alerts", !Ref 'pAccountDescription']]

  SNSAlertsError:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ['', ["Error Alerts for ", !Ref 'pAccountDescription']]
      TopicName: !Join ['-', ["Error-Alerts", !Ref 'pAccountDescription']]

  SNSAlertsInfo:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ['', ["Info Alerts for ", !Ref 'pAccountDescription']]
      TopicName: !Join ['-', ["Info-Alerts", !Ref 'pAccountDescription']]

  SNSAlertPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: AlertTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: My-statement-id
          Effect: Allow
          Principal:
            AWS: "*"
            # AWS: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':root']]
          Action: sns:Publish
          Resource: '*'
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref AWS::AccountId
      Topics:
        - !Ref 'SNSAlertsCritical'
        - !Ref 'SNSAlertsError'
        - !Ref 'SNSAlertsInfo'

  SpendingAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: cBillingAlarm
    Properties:
      AlarmDescription: !Sub "Alarm if AWS spending is over ${pBillingThreshold}"
      Namespace: AWS/Billing
      MetricName: EstimatedCharges
      Dimensions:
      - Name: Currency
        Value: USD
      Statistic: Maximum
      Period: '21600'
      EvaluationPeriods: '1'
      Threshold: !Ref 'pBillingThreshold'
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: [!Ref 'SNSAlertsError']

  InitialInfoSubscription:
    Type: AWS::SNS::Subscription
    Condition: cEMailSubscription
    Properties:
      Endpoint: !Ref 'pInitialSubscriberEmail'
      Protocol: email
      TopicArn: !Ref SNSAlertsInfo

  InitialErrorSubscription:
    Type: AWS::SNS::Subscription
    Condition: cEMailSubscription
    Properties:
      Endpoint: !Ref 'pInitialSubscriberEmail'
      Protocol: email
      TopicArn: !Ref SNSAlertsError

  InitialCriticalSubscription:
    Type: AWS::SNS::Subscription
    Condition: cEMailSubscription
    Properties:
      Endpoint: !Ref 'pInitialSubscriberEmail'
      Protocol: email
      TopicArn: !Ref SNSAlertsCritical


  #
  # Alarm to Slack Lambda
  #
  SlackNotificationLambdaRole:
    Type: AWS::IAM::Role
    Condition: cDeploySlackLambda
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: CloudWatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: ['cloudwatch:*']
            Effect: Allow
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action: ['logs:*']
            Effect: Allow
      - PolicyName: SecretAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${pSlackWebhookSecret}*

  SlackNotificationLambda:
    Type: AWS::Lambda::Function
    Condition: cDeploySlackLambda
    Properties:
      Description: Send SNS AlertTopics to Slack Channel
      Runtime: python3.7
      Handler: index.lambda_handler
      Timeout: '80'
      FunctionName: !Sub "${AWS::StackName}-send2slack"
      Role: !GetAtt [SlackNotificationLambdaRole, Arn]
      Code:
        ZipFile: |
          # Lambda to send SNS Messages to Slack

          import boto3
          from botocore.exceptions import ClientError
          import json
          import os
          from base64 import b64decode
          import urllib3

          import logging
          logger = logging.getLogger()
          logger.setLevel(getattr(logging, os.getenv('LOG_LEVEL', default='INFO')))
          logging.getLogger('botocore').setLevel(logging.WARNING)
          logging.getLogger('boto3').setLevel(logging.WARNING)
          logging.getLogger('urllib3').setLevel(logging.WARNING)


          def get_webhook(secret_name):
              client = boto3.client('secretsmanager')
              try:
                  get_secret_value_response = client.get_secret_value(SecretId=secret_name)
              except ClientError as e:
                  logger.critical(f"Unable to get secret value for {secret_name}: {e}")
                  return(None)
              else:
                  if 'SecretString' in get_secret_value_response:
                      secret_value = get_secret_value_response['SecretString']
                  else:
                      secret_value = get_secret_value_response['SecretBinary']
              try:
                  secret_dict = json.loads(secret_value)
                  return(secret_dict['webhook_url'])
              except Exception as e:
                  logger.critical(f"Error during Credential and Service extraction: {e}")
                  raise

          WEBHOOK=get_webhook(os.environ['WEBHOOK'])
          http = urllib3.PoolManager()

          def lambda_handler(event, context):
              logger.info("Received event: " + json.dumps(event, sort_keys=True))
              message = event['Records'][0]['Sns']['Message']
              subject = event['Records'][0]['Sns']['Subject']
              timestamp = event['Records'][0]['Sns']['Timestamp']
              topicARN = event['Records'][0]['Sns']['TopicArn'].split(':')[-1]
              username = topicARN
              icon = "os.environ['ICON_EMOJI']"

              if subject is None:
                slack_body = message
              elif "AlarmArn" in message:
                alarm = json.loads(message)
                slack_body = f"{alarm['AlarmName']} went into {alarm['NewStateValue']} at {alarm['StateChangeTime']}\n>*Reason:* {alarm['NewStateReason']}\n>*Description:* {alarm['AlarmDescription']}\n>*Topic:* {topicARN}\n>*AccountID:* {alarm['AWSAccountId']}"
                username = alarm['AlarmName']
                if "ALARM" in subject:
                  icon = os.environ['ALARM_EMOJI']
                if "OK" in subject:
                  icon = os.environ['OK_EMOJI']
              else:
                slack_body = f"{subject} - {message}"

              slack_message = {
                  'channel': os.environ['SLACK_CHANNEL'],
                  'text': slack_body,
                  'username': username,
                  'icon_emoji': icon
              }

              logger.debug(json.dumps(slack_message, sort_keys=True, default=str, indent=2))
              try:
                  r = http.request('POST', WEBHOOK, body=json.dumps(slack_message))
                  logger.info("Message posted to %s", slack_message['channel'])
              except Exception as e:
                  logger.error(f"Request failed: {e}")

      Environment:
        Variables:
          LOG_LEVEL: INFO
          WEBHOOK: !Ref pSlackWebhookSecret
          ACCOUNT_NAME: !Ref pAccountDescription
          SLACK_CHANNEL: !Ref pSlackChannel
          ICON_EMOJI: !Ref pIconEmoji
          ALARM_EMOJI: !Ref pAlarmEmoji
          OK_EMOJI: !Ref pOkEmoji

  SlackNotificationLambdaInvocationRole:
    Type: AWS::IAM::Role
    Condition: cDeploySlackLambda
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [events.amazonaws.com, sns.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ExecuteSlackLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: ['lambda:InvokeFunction']
            Effect: Allow
            Resource:
            - !GetAtt [SlackNotificationLambda, Arn]
  SlackNotificationLambdaPermissionSNSAlertsCritical:
    Type: AWS::Lambda::Permission
    Condition: cDeploySlackLambda
    Properties:
      FunctionName: !GetAtt [SlackNotificationLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsCritical'
      Action: lambda:invokeFunction
  SlackNotificationLambdaPermissionSNSAlertsInfo:
    Type: AWS::Lambda::Permission
    Condition: cDeploySlackLambda
    Properties:
      FunctionName: !GetAtt [SlackNotificationLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsInfo'
      Action: lambda:invokeFunction
  SlackNotificationLambdaPermissionSNSAlertsError:
    Type: AWS::Lambda::Permission
    Condition: cDeploySlackLambda
    Properties:
      FunctionName: !GetAtt [SlackNotificationLambda, Arn]
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'SNSAlertsError'
      Action: lambda:invokeFunction

  LambdaInfoSubscription:
    Type: AWS::SNS::Subscription
    Condition: cDeploySlackLambda
    Properties:
      Endpoint: !GetAtt SlackNotificationLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SNSAlertsInfo

  LambdaErrorSubscription:
    Type: AWS::SNS::Subscription
    Condition: cDeploySlackLambda
    Properties:
      Endpoint: !GetAtt SlackNotificationLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SNSAlertsError

  LambdaCriticalSubscription:
    Type: AWS::SNS::Subscription
    Condition: cDeploySlackLambda
    Properties:
      Endpoint: !GetAtt SlackNotificationLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SNSAlertsCritical


Outputs:
  SNSAlertsCriticalArn:
    Value: !Ref 'SNSAlertsCritical'
    Export:
      Name: SNSAlertsCriticalArn
  SNSAlertsErrorArn:
    Value: !Ref 'SNSAlertsError'
    Export:
      Name: SNSAlertsErrorArn
  SNSAlertsInfoArn:
    Value: !Ref 'SNSAlertsInfo'
    Export:
      Name: SNSAlertsInfoArn
  TemplateVersion:
    Value: "1.0.0"